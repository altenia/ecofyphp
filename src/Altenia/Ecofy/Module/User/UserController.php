<?php namespace Altenia\Ecofy\Module\User;
/**
 * Models from schema: AldosEngine version 0.1
 * Code generated by TransformTask
 *
 */

use Altenia\Ecofy\Controller\GenericServiceController;
use Altenia\Ecofy\Service\ServiceRegistry;

/**
 * Controller class that provides REST API to User resource
 */
class UserController extends GenericServiceController {

	public function __construct() {
		parent::__construct('layouts.workspace', 'svc:user', 'User');
	}

	public function editAuxData(&$record) {
		$auxdata = array();

		$auxdata['opt_types'] = array(
			'default' => 'default', 'member' => 'member', 'staff' => 'staff', 'admin' => 'admin'
			);

		$qparams = array('subject_type' => 'user');
		$roles = $this->getRoleService()->listRoles($qparams, array(), 0, 50);
		$opt_roles = array('' => '-');
		foreach($roles->toArray() as $role) {
			$opt_roles[$role['sid']] = $role['name'];
		}
		$auxdata['opt_roles'] = $opt_roles;

		return $auxdata;
	}

	private function getRoleService()
	{
		return ServiceRegistry::instance()->getServiceObject('role');
	}
	
	// Additional endpoints
	public function getPasswordChangeForm()
	{
		$user = \Auth::user();
		$this->layout->content = \View::make('user.changepwd')
			->with('record', $user);
	}

	public function handlePasswordChangeForm()
	{
		$password = \Input::get('password');
		$passwordConfirm = \Input::get('password_confirm');

		if (\Auth::check()) {
			if ($password !== $passwordConfirm) {
				return \Redirect::to( 'user/changepwd')
	                ->withErrors(array('Password confirmation does not match'))
	                ->withInput();
			}

			$user = \Auth::user();
			$data = array('password' => $password);
			$this->service->updateUser($user->sid, $data);

			return \Redirect::to( route($this->moduleNamePlural . '.show', array($user->sid)))
                ->withErrors(array('Password confirmation does not match'))
                ->withInput();
		} else {
			return \Redirect::to('auth/nopermission')
                ->withErrors(array('Not logged in'))
                ->withInput();
		}

	}
}